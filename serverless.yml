# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shittalk-crud # NOTE: update this with your service name

app: shittalk
tenant: daviseford

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  cors: true
  stage: dev
  region: us-east-1

iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamodb:DescribeTable"
      - "dynamodb:Query"
      - "dynamodb:Scan"
      - "dynamodb:GetItem"
      - "dynamodb:PutItem"
      - "dynamodb:UpdateItem"
      - "dynamodb:DeleteItem"
    Resource: "arn:aws:dynamodb:us-east-1:*:*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: shittalk
          method: post
          cors: true
  # readAll:
  #   handler: handler.readAll
  #   events:
  #     - http:
  #         path: shittalk
  #         method: get
  #         cors: true
  readRecent:
    handler: handler.readRecent
    events:
      - http:
          path: shittalk/recent
          method: get
          cors: true
  readTop:
    handler: handler.readTop
    events:
      - http:
          path: shittalk/top
          method: get
          cors: true
  readOld:
    handler: handler.readOld
    events:
      - http:
          path: shittalk/old
          method: get
          cors: true
  # readOne:
  #   handler: handler.readOne
  #   events:
  #     - http:
  #         path: shittalk/{id}
  #         method: get
  #         cors: true
  checkDuplicate:
    handler: handler.checkDuplicate
    events:
      - http:
          path: shittalk/check-duplicate
          method: post
          cors: true
  # update:
  #   handler: handler.update
  #   events:
  #     - http:
  #         path: shittalk/{id}
  #         method: put
  #         cors: true
  upvote:
    handler: handler.upvote
    events:
      - http:
          path: shittalk/upvote
          method: post
          cors: true
  downvote:
    handler: handler.downvote
    events:
      - http:
          path: shittalk/downvote
          method: post
          cors: true
  # delete:
  #   handler: handler.delete
  #   events:
  #     - http:
  #         path: shittalk/{id}
  #         method: delete
  #         cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    ShittalkDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: id
            AttributeType: S
          - 
            AttributeName: submission
            AttributeType: S
          - 
            AttributeName: createdAt
            AttributeType: N
          - 
            AttributeName: updatedAt
            AttributeType: N
          - 
            AttributeName: net_votes
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: submission
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TableName: 'shittalk'
        GlobalSecondaryIndexes:
          - IndexName: submissionGSI
            KeySchema:
            - AttributeName: submission
              KeyType: HASH
            - AttributeName: net_votes
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
        LocalSecondaryIndexes:
        - IndexName: createdLSI
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: netvoteLSI
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: net_votes
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: updatedLSI
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: updatedAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL